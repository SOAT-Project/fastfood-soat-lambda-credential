name: Deploy FastFoodSoatLambdaCredential Middleware

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      S3_BUCKET:
        required: true
      JWT_SECRET:
        required: true
      DISCORD_BUILD_WEBHOOK:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubDeployLambdaRole
          aws-region: sa-east-1

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew :middleware-service:clean :middleware-service:shadowJar

      - name: Package Lambda
        run: zip -j middleware-service.zip middleware-service/build/libs/*-all.jar

      - name: Upload to S3
        run: aws s3 cp middleware-service.zip s3://${{ secrets.S3_BUCKET }}/middleware-service.zip

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubDeployLambdaRole
          aws-region: sa-east-1

      - name: Terraform Init
        id: init
        working-directory: ./middleware-service/terraform
        run: terraform init

      - name: Terraform Format
        working-directory: ./middleware-service/terraform
        run: terraform fmt -check

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        working-directory: ./middleware-service/terraform
        run: terraform plan -input=false

      - name: Terraform Apply
        id: apply
        working-directory: ./middleware-service/terraform
        run: terraform apply -auto-approve \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}"

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name middleware-service-app \
            --deployment-group-name middleware-service-dg \
            --deployment-config-name CodeDeployDefault.LambdaAllAtOnce \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=middleware-service.zip,bundleType=zip
