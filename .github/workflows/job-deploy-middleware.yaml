name: "Auth Service - Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
    secrets:
      aws-assume-role-arn:
        required: true
      aws-region:
        required: true
      aws-statefile-s3-bucket:
        required: true
      aws-lock-dynamodb-table:
        required: true
      jwt-secret:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle and create ZIP
        run: ./gradlew :middleware-service:clean :middleware-service:buildZip

      - name: Upload Lambda Artifact
        uses: actions/upload-artifact@v4
        with:
          name: middleware-service-zip
          path: middleware-service/build/distributions/middleware-service-${{ inputs.environment || 'release' }}.zip

  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda Artifact
        uses: actions/download-artifact@v4
        with:
          name: middleware-service-${{ inputs.environment || 'release' }}.zip
          path: middleware-service/terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-assume-role-arn }}
          aws-region: ${{ secrets.aws-region }}

      - name: Read destroy configuration
        id: read-destroy-config
        run: |
          DESTROY="$(jq -r '.${{ inputs.environment }}' ./middleware-service/terraform/destroy_config.json)"
          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: ./middleware-service/terraform
        run: |
           terraform init \
             -backend-config="bucket=${{ secrets.aws-statefile-s3-bucket }}" \
             -backend-config="key=${{ github.event.repository.name }}-middleware-service-${{ inputs.environment || 'release' }}" \
             -backend-config="region=${{ secrets.aws-region }}" \
             -backend-config="dynamodb_table=${{ secrets.aws-lock-dynamodb-table }}" \

      - name: Terraform Validate
        working-directory: ./middleware-service/terraform
        run: terraform validate

      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        working-directory: ./middleware-service/terraform
        run: terraform destroy -auto-approve -var="prefix=${{ inputs.environment || 'release' }}" -var="jwt_secret=${{ secrets.jwt-secret }}"

      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        working-directory: ./middleware-service/terraform
        run: |
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}
          terraform plan -var="prefix=${{ inputs.environment || 'release' }}" -var="jwt_secret=${{ secrets.jwt-secret }}"

      - name: Terraform Apply
        if: steps.read-destroy-config.outputs.destroy != 'true'
        working-directory: ./middleware-service/terraform
        run: |
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}
          terraform apply "${{ inputs.environment }}.plan"